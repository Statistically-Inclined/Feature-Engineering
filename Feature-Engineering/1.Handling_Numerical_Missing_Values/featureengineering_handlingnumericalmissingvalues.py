# -*- coding: utf-8 -*-
"""FeatureEngineering-HandlingNumericalMissingValues.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P1jr957F_J1kRavJb2vORS5QCB9Xx2Om
"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import pandas as pd
import numpy as np

# %matplotlib inline
import matplotlib.pyplot as plt

df=pd.read_csv('titanic.csv')

df.head()

df.tail()

df.shape

df.info()

df.describe()

# df.keys()
df.columns

df.select_dtypes(include = ['int', 'float']).columns

df.select_dtypes(include = ['int', 'float']).columns.to_list()

df.select_dtypes(exclude = ['int', 'float']).columns

df.select_dtypes(exclude = ['int', 'float']).columns.to_list()

df.isnull().sum()

df[df['Embarked'].isnull()]

# The percentage of null values
df['cabin_null'] = np.where(df['Cabin'].isnull(),1,0)
df['cabin_null'].mean()

df.head()

# The percentage of null data in 'cabin_null' with respect to 'Survived'
df.groupby(['Survived'])['cabin_null'].mean()

df = pd.read_csv('titanic.csv',usecols=['Age','Fare','Survived'])
df.head()

# The percentage of missing values
df.isnull().mean()

"""1. CENTRAL TENDENCY TECHNIQUE"""

def impute_nan(df,variable,process):

    # Handling the Case-Sensitivity
    process = process.lower()

    if process == "mean":
      mean = df.Age.mean()
      df[variable+"_mean"] = df[variable].fillna(mean)
    
    elif process == "median":
      median = df.Age.median()
      df[variable+"_median"] = df[variable].fillna(median)

    elif process == "mode":
      mode = df.Age.mode()
      df[variable+"_mode"] = df[variable].fillna(mode)
    
    else:
      print("incorrect input")

impute_nan(df, 'Age', 'Mean')
impute_nan(df, 'Age', 'meDiaN')
impute_nan(df, 'Age', 'MODE')

df.head()

print(df['Age'].std())
print(df['Age_median'].std())
print(df['Age_mean'].std())
print(df['Age_mode'].std())

fig = plt.figure()
ax = fig.add_subplot(111)
df.Age.plot(kind='kde', ax=ax, color="blue")
df.Age_median.plot(kind='kde', ax=ax, color='red')
df.Age_mean.plot(kind='kde', ax=ax, color='green')
df.Age_mode.plot(kind='kde', ax=ax, color='yellow')
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines, labels, loc='best')

# df = df.drop('Age',axis=1)

"""2. RANDOM SAMPLE IMPUTATION"""

df=pd.read_csv('titanic.csv')

df['Age'].isnull().sum()

# Getting 177 random samples from the non-null data
df['Age'].dropna().sample(df['Age'].isnull().sum(),random_state=0)

df[df['Age'].isnull()].index

def impute_nan_random(df,variable):
    df[variable+"_random"] = df[variable]
    # Getting random samples from the non-null data
    random_sample = df[variable].dropna().sample(df[variable].isnull().sum(),random_state=0)
    # getting the same index values of null data
    random_sample.index = df[df[variable].isnull()].index
    # Placing random values at null indexes
    df.loc[df[variable].isnull(),variable+'_random'] = random_sample

impute_nan_random(df,"Age")

df.head()

fig = plt.figure()
ax = fig.add_subplot(111)
df.Age.plot(kind='kde', ax=ax)
df.Age_random.plot(kind='kde', ax=ax, color='green')
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines, labels, loc='best')

"""3. CAPTURING NULL VALUES WITH A NEW FEATURE WITH ANY CENTRAL TENDENCY TECHNIQUE."""

df['Age_NAN'] = np.where(df['Age'].isnull(),1,0)

impute_nan(df, "Age", 'Mean')
impute_nan(df, "Age", 'Median')
impute_nan(df, "Age", 'Mode')

df.head()

"""4. END OF DISTRIBUTION IMPUTATION"""

df.Age.hist(bins=50)

extreme_upper = df.Age.mean() + 3*df.Age.std()
extreme_lower = df.Age.mean() - 3*df.Age.std()
print(extreme_upper)
print(extreme_lower)

# We can observe that only upper outliers exists
sns.boxplot('Age',data=df)

def impute_nan_end_dist(df,variable,extreme):
    df[variable+"_end_distribution"] = df[variable].fillna(extreme)

impute_nan_end_dist(df,"Age",extreme_upper)

df.head()

df.Age.isnull().sum()

df['Age'].hist(bins=50)

sns.distplot(df['Age'])

df['Age_mean'].hist(bins=50)

sns.distplot(df['Age_mean'])

df['Age_median'].hist(bins=50)

sns.distplot(df['Age_median'])

df['Age_mode'].hist(bins=50)

sns.distplot(df['Age_mode'])

df['Age_end_distribution'].hist(bins=50)

sns.distplot(df['Age_end_distribution'])

sns.boxplot('Age_end_distribution',data=df)

