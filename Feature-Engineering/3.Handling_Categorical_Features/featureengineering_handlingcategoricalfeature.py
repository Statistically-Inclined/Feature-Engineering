# -*- coding: utf-8 -*-
"""FeatureEngineering-HandlingCategoricalFeature.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tM-Cun-AX5Oq8EOH0Pdce6hLH38k61lz
"""

import pandas as pd
import numpy as np

df = pd.read_csv('titanic.csv',usecols=['Sex', 'Embarked'])

df.head()

print("Sex: ",df.Sex.unique())
print("embarked: ",df.Embarked.unique())

df.isnull().sum()

mode = df.Embarked.mode()[0]
df.Embarked.fillna(mode, inplace=True)
# df.Embarked.dropna(inplace=True)

df.isnull().sum()

"""1. ONE HOT ENCODING"""

df_encoded = pd.get_dummies(df,drop_first=True)

df_encoded.head()

"""2. ONE HOT ENCODING WITH MANY CATEGORIES IN A FEATURE"""

df = pd.read_csv('mercedes.csv',usecols=["X0","X1","X2","X3","X4","X5","X6"])

df.head()

for feature in df.columns:
    print('{} feature has {} categories'.format(feature, df[feature].nunique()))
    #print('{} feature has {} categories'.format(feature, len(df[feature].unique())))

# Top 10 categories for a particular feature
df.X1.value_counts().sort_values(ascending=False).head(10)

lst_10 = df.X1.value_counts().sort_values(ascending=False).head(10).index
lst_10 = list(lst_10)
lst_10

for categories in lst_10:
    df[categories] = np.where(df['X1'] == categories,1,0)

lst_10.append('X1')

df[lst_10]

def top_OHE(df, variable, count):
  lst_count = df[variable].value_counts().sort_values(ascending=False).head(count).index
  lst_count = list(lst_count)
  for categories in lst_count:
    df[categories] = np.where(df[variable] == categories,1,0)

top_OHE(df, 'X1', 12)

df.head()

"""3. COUNT OR FREQUENCY ENCODING"""

df = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data' , header = None,index_col=None)
df.head()

columns = [1,3,5,6,7,8,9,13]

df = df[columns]

df.head()

df.columns = ['Employment','Degree','Status','Designation','family_job','Race','Sex','Country']

df.head()

for feature in df.columns:
  print("{} feature has {} categories". format(feature, df[feature].nunique()))
  # print(feature,":",len(df[feature].unique()),'labels')

country_count_mapping = df.Country.value_counts().to_dict()

country_count_mapping

df['Country_Count_Mapping'] = df['Country'].map(country_count_mapping)

df.head(10)

def category_count_map(df, variable):
  count_mapping = df[variable].value_counts().to_dict()
  df[variable+'_Count_Mapping'] = df[variable].map(count_mapping)

category_count_map(df, 'Sex' )

df.head()

"""4. TARGET GUIDED ORDINAL ENCODING"""

df = pd.read_csv('titanic.csv', usecols = ['Cabin','Survived'])
df.head()

df['Cabin'].fillna('Missing',inplace=True)

df.head()

df.Cabin.unique()

df['Cabin_target_guided'] = df['Cabin'].astype(str).str[0]

df.Cabin_target_guided.unique()

df.head()

# Percentage count using another valid variable
df.groupby(['Cabin_target_guided'])['Survived'].mean()

df.groupby(['Cabin_target_guided'])['Survived'].mean().sort_values().index

ordinal_labels = df.groupby(['Cabin_target_guided'])['Survived'].mean().sort_values().index
ordinal_labels

ordinal_labels = list(ordinal_labels)
ordinal_labels

ordinal_labels2 = {k:i for i,k in enumerate(ordinal_labels,0)}
ordinal_labels2

df['Cabin_ordinal_labels']=df['Cabin_target_guided'].map(ordinal_labels2)
df.head()

"""5. TARGET GUIDED MEAN ENCODING"""

df.groupby(['Cabin_target_guided'])['Survived'].mean().to_dict()

mean_ordinal = df.groupby(['Cabin_target_guided'])['Survived'].mean().to_dict()

df['mean_ordinal_encode'] = df['Cabin_target_guided'].map(mean_ordinal)
df.head()

"""6.PROBABILITY RATIO ENCODING"""

df = pd.read_csv('titanic.csv', usecols = ['Cabin','Survived'])
df.head()

df.Cabin.fillna('Missing', inplace=True)

df.head()

df['Cabin_target_guided'] = df.Cabin.astype(str).str[0]

df.head()

prob_df = df.groupby(['Cabin_target_guided'])['Survived'].mean()

prob_df = pd.DataFrame(prob_df)

prob_df.head()

prob_df['Died'] = 1-prob_df['Survived']

prob_df.head()

prob_df['Probability_ratio'] = prob_df['Survived']/prob_df['Died']
prob_df.head()

probability_encoded = prob_df['Probability_ratio'].to_dict()

df['Cabin_encoded'] = df['Cabin_target_guided'].map(probability_encoded)
df.head()

