# -*- coding: utf-8 -*-
"""FeatureEngineering-FeatureTransformation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3aFPdGdjsEClFotTACm2WQTUMMZzU5K
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
import matplotlib.pyplot as plt

df = pd.read_csv('titanic.csv', usecols=['Pclass','Age','Fare','Survived'])
df.head()

df['Age'].fillna(df.Age.median(),inplace=True)

df.isnull().sum()

"""STANDARDIZATION"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df), columns = df.columns)

df_scaled.head()

df_scaled.shape

plt.hist(df_scaled['Age'],bins=20)

import seaborn as sns
ax = sns.distplot(df['Age'])

plt.hist(df_scaled['Fare'],bins=20)

ax = sns.distplot(df['Fare'])

"""2. NORMALIZATION"""

from sklearn.preprocessing import MinMaxScaler
min_max = MinMaxScaler()
df_minmax = pd.DataFrame(min_max.fit_transform(df), columns=df.columns)

df_minmax.head()

plt.hist(df_minmax['Age'],bins=20)

plt.hist(df_minmax['Fare'],bins=20)

"""3. ROBUST SCALER"""

from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()
df_robust_scaler = pd.DataFrame(scaler.fit_transform(df),columns=df.columns)

df_robust_scaler.head()

plt.hist(df_robust_scaler['Age'],bins=20)

plt.hist(df_robust_scaler['Fare'],bins=20)

"""4. GAUSSIAN TRANSFORMATION"""

import scipy.stats as stat
import pylab

# If you want to check whether feature is guassian or normal distributed
# Q-Q plot
def plot_data(df,feature):
    plt.figure(figsize=(10,6))
    plt.subplot(1,2,1)
    df[feature].hist()
    plt.subplot(1,2,2)
    stat.probplot(df[feature],dist='norm',plot=pylab)
    plt.show()

plot_data(df,'Age')

"""5. LOGARITHMIC TRANSFORMATION"""

import numpy as np
df['Age_log'] = np.log(df['Age'])
plot_data(df,'Age_log')

"""6. RECIPROCAL TRANSFORMATION"""

df['Age_reciprocal']=1/df.Age
plot_data(df,'Age_reciprocal')

df[df.Fare == 0].head()

# df['Fare_reciprocal'] = 1/df.Fare
# plot_data(df,'Fare_reciprocal')

"""7. SQUARE-ROOT TRANSFORMATION"""

df['Age_sqaure']=df.Age**(1/2)
plot_data(df,'Age_sqaure')

"""8. EXPONENTIAL TRANSFORMATION"""

df['Age_exponential'] = df.Age**(1/1.2)
plot_data(df,'Age_exponential')

"""9. BOXCOX TRANSFORMATION"""

df['Age_Boxcox'],parameters = stat.boxcox(df['Age'])

print(parameters)

plot_data(df,'Age_Boxcox')

plot_data(df,'Fare')

# Logarithmic Transformation
df['Fare_log']=np.log1p(df['Fare'])
plot_data(df,'Fare_log')

# Boxcox Tranformation
df['Fare_Boxcox'],parameters=stat.boxcox(df['Fare']+1)
plot_data(df,'Fare_Boxcox')

# If you want to check whether feature is guassian or normal distributed
# Q-Q plot

def plot_multiple_data(df, variable):

    df[variable+'_log'] = np.log1p(df[variable])
    df[variable+'_reciprocal']=1/df[variable]
    df[variable+'_square']=df[variable]**(1/2)
    df[variable+'_exponential'] = df[variable]**(1/1.2)
    df[variable+'_Boxcox'],parameters = stat.boxcox(df[variable]+1)

    plt.figure(figsize=(40, 10))
    plt.subplot(1,6,1, )
    df[variable].hist()
    plt.subplot(1,6,2)
    stat.probplot(df[variable+'_log'], dist='norm', plot=pylab)
    plt.subplot(1,6,3)
    stat.probplot(df[variable+'_reciprocal'], dist='norm', plot=pylab)
    plt.subplot(1,6,4)
    stat.probplot(df[variable+'_square'], dist='norm', plot=pylab)
    plt.subplot(1,6,5)
    stat.probplot(df[variable+'_exponential'], dist='norm', plot=pylab)
    plt.subplot(1,6,6)
    stat.probplot(df[variable+'_Boxcox'], dist='norm', plot=pylab)
    
    plt.show()

plot_multiple_data(df, 'Age')

plot_multiple_data(df, 'Fare')

plot_multiple_data(df, 'Pclass')

